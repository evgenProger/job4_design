package ru.job4j.solid.lsp.exampletwo;

/*
Класс демонстрирует принцип замещения Лискова (LSP).
  * Согласно принципу, функции, использующие ссылки на базовые классы, должны иметь возможность использовать
  объекты производного класса, не зная об этом.
  * Таким образом, в примере, показанном ниже, функция calculateArea, который использует ссылку "Rectangle",
  должна иметь возможность использовать объекты  производного класса, такой как Square, и выполнить требование,
  сформулированное в определении Rectangle.
 */

public class LspDemo {
    /**
     * Следует отметить, что согласно определению Rectangle, следующее всегда должно выполняться, учитывая данные ниже:
     * 1. Длина всегда должна быть равна длине, переданной в качестве входных данных в метод setLength.
     * 2. Ширина всегда должна быть равна ширине, передаваемой в качестве входных данных в метод setBreadth.
     * 3. Площадь всегда должна быть равна произведению длины и ширины.
     *
     * В случае, если мы пытаемся установить связь ISA между квадратом и прямоугольником так, что мы называем «квадрат
     *  является прямоугольником»,  приведенный ниже код начнет вести себя неожиданно, если будет передан экземпляр Square
     * Ошибка утверждения будет выдана в случае проверки области и проверки ширины, хотя программа завершится как
     * ошибка утверждения выброшена из-за сбоя проверки области.
     *
     * @param r Экземпляр прямоугольника
     */

    public void calculateArea(Rectangle r) {
        r.setBreadth(2);
        r.setLength(3);

        /** Область утверждения
         Исходя из кода, ожидаемое поведение таково, что
         площадь прямоугольника равна 6
         */

        assert r.getArea() == 6 : printError("area", r);

   /**
    Утверждаем длину и ширину
          Исходя из кода, ожидаемое поведение таково, что
          длина всегда должна быть равна 3 и
          ширина всегда должна быть равна 2
    */
        assert r.getLength() == 3 : printError("length", r);
        assert r.getBreadth() == 2 : printError("breadth", r);
    }


    private String printError(String errorIdentifer, Rectangle r) {
        return "Unexpected value of " + errorIdentifer + "  for instance of " + r.getClass().getName();
    }

    public static void main(String[] args) {
        LspDemo lspDemo = new LspDemo();

        lspDemo.calculateArea(new Rectangle());

        lspDemo.calculateArea(new Square());
    }

 /**
 Учитывая приведенный выше код, в чем проблема с ISA-связью Square-Rectangle?

Классу Square не нужны такие методы, как setBreadth или setLength, поскольку стороны квадрата равны. Это расточительно.
Представьте себе сотни тысяч квадратных объектов.
Классу LSPDemo необходимо знать подробности производных классов Rectangle (например, Square) для правильного
кодирования, чтобы избежать выдачи ошибок. Изменение в существующем коде, чтобы позаботиться о производном классе,
 первую очередь нарушает принцип открытого-закрытого.

 https://dzone.com/articles/the-liskov-substitution-principle-with-examples
 */

}

